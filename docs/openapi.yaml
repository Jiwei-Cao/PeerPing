openapi: 3.0.3
info:
  title: PeerPing API
  version: 1.0.0
  description: |
    PeerPing MVP API - Connect learners and teachers within UK cities
    
    ## API Conventions
    - Base path: `/v1`
    - Authentication: `Authorization: Bearer <access_jwt>`
    - Pagination: Cursor-based with `?limit=&cursor=` returning `{ items, nextCursor }`
    - Errors: RFC7807 Problem Details format
    - Idempotency: Use `Idempotency-Key` header for create operations
    - Rate limiting: Returns 429 with `Retry-After` header

servers:
  - url: https://api.peerping.dev/v1
    description: Development server
  - url: https://api.peerping.com/v1
    description: Production server

tags:
  - name: auth
    description: Authentication endpoints
  - name: profile
    description: User profile management
  - name: discover
    description: Discovery and search
  - name: social
    description: Social features (saves, blocks, reports, connections)
  - name: messaging
    description: Direct messaging
  - name: privacy
    description: GDPR privacy operations

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      required:
        - type
        - title
        - status
        - detail
      properties:
        type:
          type: string
          example: "https://api.peerping.com/errors/validation"
        title:
          type: string
          example: "Validation Error"
        status:
          type: integer
          example: 400
        detail:
          type: string
          example: "The email field is invalid"
        code:
          type: string
          example: "INVALID_EMAIL"

    User:
      type: object
      required:
        - id
        - username
        - email
        - displayName
        - role
        - city
        - friendsCount
        - createdAt
        - lastActiveAt
      properties:
        id:
          type: string
          format: uuid
          example: "0193e3dc-0000-7000-8000-000000000001"
        username:
          type: string
          minLength: 3
          maxLength: 30
          pattern: "^[a-zA-Z0-9_]+$"
          example: "johndoe"
        email:
          type: string
          format: email
          example: "john@example.com"
        displayName:
          type: string
          minLength: 1
          maxLength: 50
          example: "John Doe"
        avatarUrl:
          type: string
          format: uri
          example: "https://cdn.peerping.com/users/123/avatars/456.jpg"
        bio:
          type: string
          maxLength: 120
          example: "Passionate about languages and cooking"
        role:
          type: string
          enum: [LEARNER, TEACHER, BOTH]
          example: "BOTH"
        city:
          type: string
          example: "London"
        friendsCount:
          type: integer
          minimum: 0
          example: 42
        createdAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        lastActiveAt:
          type: string
          format: date-time
          example: "2024-01-20T14:45:00Z"

    UserProfile:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            tags:
              type: array
              items:
                $ref: '#/components/schemas/UserTag'
            languages:
              type: array
              items:
                type: string
                example: "en"
            availability:
              type: array
              items:
                type: string
                enum: [MORN, EVE, WKNDS, WKNT]

    UserTag:
      type: object
      required:
        - id
        - name
        - intent
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: "Spanish"
        intent:
          type: string
          enum: [LEARN, TEACH]
          example: "LEARN"

    RegisterRequest:
      type: object
      required:
        - username
        - email
        - password
        - displayName
        - role
        - city
        - agreedToTerms
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 30
          pattern: "^[a-zA-Z0-9_]+$"
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
          maxLength: 128
        displayName:
          type: string
          minLength: 1
          maxLength: 50
        role:
          type: string
          enum: [LEARNER, TEACHER, BOTH]
        city:
          type: string
        bio:
          type: string
          maxLength: 120
        agreedToTerms:
          type: boolean

    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: "Username or email"
        password:
          type: string

    AuthResponse:
      type: object
      required:
        - accessToken
        - refreshToken
        - expiresIn
      properties:
        accessToken:
          type: string
          example: "eyJhbGciOiJIUzI1NiIs..."
        refreshToken:
          type: string
          example: "eyJhbGciOiJIUzI1NiIs..."
        expiresIn:
          type: integer
          description: "Access token expiry in seconds"
          example: 1800

    RefreshRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string

    UpdateProfileRequest:
      type: object
      properties:
        displayName:
          type: string
          minLength: 1
          maxLength: 50
        bio:
          type: string
          maxLength: 120
        city:
          type: string

    UpdateTagsRequest:
      type: object
      required:
        - tags
      properties:
        tags:
          type: array
          minItems: 0
          maxItems: 3
          items:
            type: object
            required:
              - tagId
              - intent
            properties:
              tagId:
                type: string
                format: uuid
              intent:
                type: string
                enum: [LEARN, TEACH]

    UpdateLanguagesRequest:
      type: object
      required:
        - languages
      properties:
        languages:
          type: array
          minItems: 1
          maxItems: 5
          items:
            type: string
            pattern: "^[a-z]{2}(-[A-Z]{2})?$"
            example: "en"

    UpdateAvailabilityRequest:
      type: object
      required:
        - availability
      properties:
        availability:
          type: array
          minItems: 0
          maxItems: 4
          uniqueItems: true
          items:
            type: string
            enum: [MORN, EVE, WKNDS, WKNT]

    PresignedUploadUrl:
      type: object
      required:
        - uploadUrl
        - fileKey
        - expiresAt
      properties:
        uploadUrl:
          type: string
          format: uri
          example: "https://s3.amazonaws.com/..."
        fileKey:
          type: string
          example: "users/123/avatars/456.jpg"
        expiresAt:
          type: string
          format: date-time

    UserCard:
      type: object
      required:
        - id
        - displayName
        - role
        - city
        - friendsCount
        - tags
        - languages
        - availability
      properties:
        id:
          type: string
          format: uuid
        displayName:
          type: string
        avatarUrl:
          type: string
          format: uri
        bio:
          type: string
        role:
          type: string
          enum: [LEARNER, TEACHER, BOTH]
        city:
          type: string
        friendsCount:
          type: integer
        tags:
          type: array
          items:
            $ref: '#/components/schemas/UserTag'
        languages:
          type: array
          items:
            type: string
        availability:
          type: array
          items:
            type: string
            enum: [MORN, EVE, WKNDS, WKNT]
        isSaved:
          type: boolean
          default: false
        isConnected:
          type: boolean
          default: false

    PaginatedUserCards:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/UserCard'
        nextCursor:
          type: string
          description: "Cursor for next page"

    Connection:
      type: object
      required:
        - id
        - requester
        - recipient
        - status
        - createdAt
      properties:
        id:
          type: string
          format: uuid
        requester:
          $ref: '#/components/schemas/User'
        recipient:
          $ref: '#/components/schemas/User'
        status:
          type: string
          enum: [PENDING, ACCEPTED, DECLINED]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    PaginatedConnections:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Connection'
        nextCursor:
          type: string

    CreateConnectionRequest:
      type: object
      required:
        - recipientId
      properties:
        recipientId:
          type: string
          format: uuid

    UpdateConnectionRequest:
      type: object
      required:
        - action
      properties:
        action:
          type: string
          enum: [accept, decline, cancel]

    ReportRequest:
      type: object
      required:
        - reportedUserId
        - reason
      properties:
        reportedUserId:
          type: string
          format: uuid
        reason:
          type: string
          enum: [SPAM, HARASSMENT, INAPPROPRIATE, FAKE_PROFILE, OTHER]
        detail:
          type: string
          maxLength: 500

    Conversation:
      type: object
      required:
        - id
        - otherUser
        - lastMessageAt
      properties:
        id:
          type: string
          format: uuid
        otherUser:
          $ref: '#/components/schemas/User'
        lastMessageAt:
          type: string
          format: date-time
        lastMessage:
          $ref: '#/components/schemas/Message'

    PaginatedConversations:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Conversation'
        nextCursor:
          type: string

    Message:
      type: object
      required:
        - id
        - conversationId
        - senderId
        - body
        - createdAt
      properties:
        id:
          type: string
          format: uuid
        conversationId:
          type: string
          format: uuid
        senderId:
          type: string
          format: uuid
        body:
          type: string
          maxLength: 1000
        createdAt:
          type: string
          format: date-time

    PaginatedMessages:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Message'
        nextCursor:
          type: string

    CreateMessageRequest:
      type: object
      required:
        - body
      properties:
        body:
          type: string
          minLength: 1
          maxLength: 1000

    ExportJob:
      type: object
      required:
        - jobId
        - status
        - createdAt
      properties:
        jobId:
          type: string
          format: uuid
        status:
          type: string
          enum: [PENDING, PROCESSING, COMPLETED, FAILED]
        createdAt:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time
        resultUrl:
          type: string
          format: uri
          description: "Presigned URL to download export (valid for 24 hours)"

    Tag:
      type: object
      required:
        - id
        - name
        - category
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: "Spanish"
        category:
          type: string
          example: "language"

  parameters:
    IdempotencyKey:
      name: Idempotency-Key
      in: header
      required: false
      schema:
        type: string
      description: "Key for idempotent requests"

    Limit:
      name: limit
      in: query
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
      description: "Number of items per page"

    Cursor:
      name: cursor
      in: query
      required: false
      schema:
        type: string
      description: "Cursor for pagination"

paths:
  /auth/register:
    post:
      tags: [auth]
      summary: Register new user
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Validation error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Username or email already exists
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      tags: [auth]
      summary: Login user
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many failed attempts
          headers:
            Retry-After:
              schema:
                type: integer
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/refresh:
    post:
      tags: [auth]
      summary: Refresh access token
      operationId: refreshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshRequest'
      responses:
        '200':
          description: Token refreshed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid refresh token
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/logout:
    post:
      tags: [auth]
      summary: Logout user (revoke refresh token)
      operationId: logout
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Logout successful
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/me:
    get:
      tags: [profile]
      summary: Get current user profile
      operationId: getCurrentUser
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'

    patch:
      tags: [profile]
      summary: Update current user profile
      operationId: updateProfile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: Profile updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '400':
          description: Validation error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags: [profile, privacy]
      summary: Delete current user account (GDPR)
      operationId: deleteAccount
      security:
        - bearerAuth: []
      responses:
        '202':
          description: Account deletion initiated
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/me/tags:
    put:
      tags: [profile]
      summary: Update user tags
      operationId: updateTags
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTagsRequest'
      responses:
        '200':
          description: Tags updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '400':
          description: Validation error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/me/languages:
    put:
      tags: [profile]
      summary: Update user languages
      operationId: updateLanguages
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLanguagesRequest'
      responses:
        '200':
          description: Languages updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '400':
          description: Validation error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/me/availability:
    put:
      tags: [profile]
      summary: Update user availability
      operationId: updateAvailability
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAvailabilityRequest'
      responses:
        '200':
          description: Availability updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '400':
          description: Validation error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/me/avatar/upload-url:
    post:
      tags: [profile]
      summary: Get presigned URL for avatar upload
      operationId: getAvatarUploadUrl
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Presigned upload URL
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PresignedUploadUrl'
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'

  /discover:
    get:
      tags: [discover]
      summary: Get discover feed
      operationId: discover
      security:
        - bearerAuth: []
      parameters:
        - name: city
          in: query
          required: false
          schema:
            type: string
          description: "Filter by city (defaults to user's city)"
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Cursor'
      responses:
        '200':
          description: Discover feed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserCards'
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'

  /search:
    get:
      tags: [discover]
      summary: Search users
      operationId: searchUsers
      security:
        - bearerAuth: []
      parameters:
        - name: q
          in: query
          required: false
          schema:
            type: string
          description: "Search query (name or tag)"
        - name: city
          in: query
          required: false
          schema:
            type: string
        - name: role
          in: query
          required: false
          schema:
            type: string
            enum: [LEARNER, TEACHER, BOTH]
        - name: lang
          in: query
          required: false
          schema:
            type: string
          description: "Language code"
        - name: availability
          in: query
          required: false
          schema:
            type: string
            enum: [MORN, EVE, WKNDS, WKNT]
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Cursor'
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserCards'
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'

  /tags:
    get:
      tags: [discover]
      summary: Get all available tags
      operationId: getTags
      responses:
        '200':
          description: List of tags
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'

  /save/{userId}:
    post:
      tags: [social]
      summary: Save a user profile
      operationId: saveUser
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '201':
          description: User saved
        '400':
          description: Cannot save self or blocked user
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags: [social]
      summary: Unsave a user profile
      operationId: unsaveUser
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: User unsaved
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'

  /block/{userId}:
    post:
      tags: [social]
      summary: Block a user
      operationId: blockUser
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '201':
          description: User blocked
        '400':
          description: Cannot block self
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'

  /report:
    post:
      tags: [social]
      summary: Report a user
      operationId: reportUser
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/IdempotencyKey'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReportRequest'
      responses:
        '201':
          description: Report created
        '400':
          description: Validation error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'

  /connections:
    post:
      tags: [social]
      summary: Send friend request
      operationId: createConnection
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/IdempotencyKey'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConnectionRequest'
      responses:
        '201':
          description: Friend request sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connection'
        '400':
          description: Validation error or already connected
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Daily friend request limit reached
          headers:
            Retry-After:
              schema:
                type: integer
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      tags: [social]
      summary: Get connections
      operationId: getConnections
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum: [pending, accepted]
          description: "Filter by connection status"
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Cursor'
      responses:
        '200':
          description: List of connections
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedConnections'
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'

  /connections/{id}:
    patch:
      tags: [social]
      summary: Update connection status
      operationId: updateConnection
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateConnectionRequest'
      responses:
        '200':
          description: Connection updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connection'
        '400':
          description: Invalid action
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Connection not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'

  /conversations:
    get:
      tags: [messaging]
      summary: Get conversations
      operationId: getConversations
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Cursor'
      responses:
        '200':
          description: List of conversations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedConversations'
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'

  /conversations/{id}/messages:
    get:
      tags: [messaging]
      summary: Get messages in conversation
      operationId: getMessages
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Cursor'
      responses:
        '200':
          description: List of messages
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedMessages'
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Conversation not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags: [messaging]
      summary: Send message
      operationId: sendMessage
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/IdempotencyKey'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMessageRequest'
      responses:
        '201':
          description: Message sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '400':
          description: Validation error or blocked
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Conversation not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'

  /privacy/export:
    post:
      tags: [privacy]
      summary: Request GDPR data export
      operationId: requestExport
      security:
        - bearerAuth: []
      responses:
        '202':
          description: Export job created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportJob'
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'

  /privacy/jobs/{jobId}:
    get:
      tags: [privacy]
      summary: Get export job status
      operationId: getExportJob
      security:
        - bearerAuth: []
      parameters:
        - name: jobId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Export job details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportJob'
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Job not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'